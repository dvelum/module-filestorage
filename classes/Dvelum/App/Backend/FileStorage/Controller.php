<?php
/**
 * DVelum project http://code.google.com/p/dvelum/ , https://github.com/k-samuel/dvelum , http://dvelum.net
 * Copyright (C) 2011-2017  Kirill Yegorov
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace Dvelum\App\Backend\FileStorage;
use Dvelum\Utils;
/**
 * File storage UI controller
 */
use Dvelum\Orm;
use Dvelum\Db\Select;
use Dvelum\Orm\Model;
use Dvelum\App\Backend\Api;
use Dvelum\App\Controller\EventManager;
use Dvelum\App\Controller\Event;
use Dvelum\FileStorage;

class Controller extends Api\Controller
{
    protected $canViewObjects = ['user'];

    public function getModule(): string
    {
        return 'Filestorage';
    }

    public function getObjectName(): string
    {
        return 'Filestorage';
    }

    public function indexAction()
    {
        $certStorage = Model::factory('Filestorage')->getStorage();
        $this->resource->addInlineJs('app.filestorageConfig = '.json_encode($certStorage->getConfig()->get('uploader_config')).';');
        parent::indexAction();
    }

    public function initListeners()
    {
        parent::initListeners(); // TODO: Change the autogenerated stub

        $apiRequest = $this->apiRequest;

        $this->eventManager->on(EventManager::BEFORE_LIST, function(Event $event) use ($apiRequest){
            $date = $apiRequest->getFilter('date');
            if(!empty($date)){
                $date = date('Y-m-d', strtotime($date));
                $dateFilter = new Select\Filter('date' , array($date.' 00:00:00', $date.' 23:59:59') , \Db_Select_Filter::BETWEEN);
                $apiRequest->addFilter('date', $dateFilter);

            }else{
                $apiRequest->resetFilter('date');
            }
        });

        $this->eventManager->on(EventManager::AFTER_LIST,[$this, 'prepareList']);
    }

    public function prepareList(Event $event)
    {
        $data = & $event->getData()->data;

        if(empty($data)){
            return;
        }

        $userIds = Utils::fetchCol('user_id' , $data);
        $userData = [];

        if(empty($userIds)){
            return;
        }

        $userData = Model::factory('User')
            ->query()
            ->filters(['id'=>$userIds])
            ->fields(['id','name'])
            ->fetchAll();

        if(!empty($userData)){
            $userData = Utils::rekey('id' , $userData);
        }

        foreach($data as $k=>&$v)
        {
            if(isset($userData[$v['user_id']])){
                $v['user_name'] = $userData[$v['user_id']]['name'];
            }else{
                $v['user_name'] = '';
            }
        }unset($v);
    }

    /**
     * Download file from FileStorage
     */
    public function downloadAction()
    {
        $fileId = intval($this->request->getPart(3));

        if(!$fileId){
            $this->response->redirect('/');
        }

        try{
            $file = Orm\Record::factory('Filestorage' , $fileId);
        }catch (\Exception $e){
            $this->response->redirect('/');
        }

        $storage = Model::factory('Filestorage')->getStorage();
        $storageConfig = $storage->getConfig()->__toArray();

        $storagePath = $storageConfig['filepath']. $file->get('path');

        if (!file_exists($storagePath)) {
            $this->response->put($this->lang->get('FILE_NOT_FOUND'));
            $this->response->send();
        }

        header('Content-Description: File Transfer');
        // header('Content-Type: application/octet-stream');
        header('Content-Disposition: attachment; filename=' . str_replace(' ' ,'_' , $file->get('name')));

        switch($storageConfig['download']['type']){
            case 'native' :
                readfile($storagePath);
                break;
            case 'apache' :
                $filePath = $storageConfig['redirect_path']. $file->get('path');
                header('X-Sendfile: ' . $filePath);
                break;
            case 'nginx' :
                $filePath = $storageConfig['redirect_path']. $file->get('path');
                header('X-Accel-Redirect: ' . $filePath);
                break;
        }
        exit();
    }

    /**
     * file upload
     */
    public function uploadAction()
    {
        if(!$this->checkCanEdit()){
            return;
        }

        $files = $this->request->files();

        if (!isset($files['file']) || empty($files['file'])){
            $this->response->error($this->lang->get('FILL_FORM'));
        }

        /**
         * @var FileStorage\AbstractAdapter $fileStorage
         */
        $fileStorage = Model::factory('Filestorage')->getStorage();

        $files = $fileStorage->upload();

        if (empty($files)) {
            $this->response->error($this->lang->get('CANT_EXEC'));
        }

        $this->response->success();
    }

    /**
     * Delete object
     * Sends JSON reply in the result and
     * closes the application
     */
    public function deleteAction()
    {
        if(!$this->checkCanDelete()){
            return;
        }

        $id = $this->request->post('id' , 'integer' , false);

        if(!$id)
            $this->response->error($this->lang->get('WRONG_REQUEST'));

        try{
            $object = Orm\Record::factory($this->objectName , $id);
        }catch(\Exception $e){
            $this->response->error($this->lang->get('WRONG_REQUEST'));
        }

        $acl = $object->getAcl();
        if($acl && !$acl->canDelete($object)){
            $this->response->error($this->lang->get('CANT_DELETE'));
        }

        $fileStorage = Model::factory('Filestorage')->getStorage();

        if(!$fileStorage->remove($id)){
            $this->response->error($this->lang->get('CANT_EXEC'));
        }

        $this->response->success();
    }
}